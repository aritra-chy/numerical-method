

//bisection method




%cleaRING SCREEN
clc

%SETTING X AS SYMBOLIC VARIABLE
syms x;

%INPUT SECTION
y=input('Enter a non_linear equation : ');
a=input('Enter first guess : ');
b=input('Enter second guess : ');
e=input('Tolerable error : ');

%FINDING FUNCTIONAL VALUES
fa=eval(subs(y,x,a));  %eval=evalution and subs=substitution
fb=eval(subs(y,x,b));   %here y is function and x value is substituted by the value of b



%IMPLEMENTING BISECTIONAL METHOD
if fa*fb>0
    disp('Given initial values do not bracket the root. ');
end
while(fa*fb>0)
    a=a+1;
    b=b+1;
    fa=eval(subs(y,x,a));  %eval=evalution and subs=substitution
    fb=eval(subs(y,x,b));   %here y is function and x value is substituted by the value of b

end
    c=(a+b)/2;
    fc=eval(subs(y,x,c));
    fprintf('\n\na\t\t\tb\t\t\tc\t\t\tf(c)\n'); %here printed x0 x1 x2 f(x2)
    
    while abs(fc)>e
        fprintf('%f\t%f\t%f\t%f\n ',a,b,c,fc); %here printed the values of  x0 x1 x2 f(x2)
        if fa*fc<0
            b=c;
        else
            a=c;
        end
        c=(a+b)/2;
        fc=eval(subs(y,x,c));
    
    end
    fprintf('\nRoot is : %f\n',c);
   




// Regula falsi method



%cleaRING SCREEN
clc

%SETTING X AS SYMBOLIC VARIABLE
syms x;



%INPUT SECTION
y=input('Enter a non_linear equation : ');
a=input('Enter first guess : ');
b=input('Enter second guess : ');
e=input('Tolerable error : ');


%FINDING FUNCTIONAL VALUES
fa=eval(subs(y,x,a));  %eval=evalution and subs=substitution
fb=eval(subs(y,x,b));   %here y is function and x value is substituted by the value of b



%IMPLEMENTING BISECTIONAL METHOD
if fa*fb>0
    disp('Given initial values do not bracket the root. ');
end
while(fa*fb>0)
    a=a+1;
    b=b+1;
    fa=eval(subs(y,x,a));  %eval=evalution and subs=substitution
    fb=eval(subs(y,x,b));   %here y is function and x value is substituted by the value of b

end
    c=a-(a-b) * fa/(fa-fb); %c=b*f
    fc=eval(subs(y,x,c));
    fprintf('\n\na\t\t\tb\t\t\tc\t\t\tf(c)\n'); %here printed x0 x1 x2 f(x2)
    
    while abs(fc)>e
        fprintf('%f\t%f\t%f\t%f\n ',a,b,c,fc); %here printed the values of  x0 x1 x2 f(x2)
        if fa*fc<0
            b=c;
        else
            a=c;
        end
        c=a-(a-b) * fa/(fa-fb);
        fc=eval(subs(y,x,c));
    
    end
    fprintf('\nRoot is : %f\n',c);




// Newton Raphson method




clc   % Clearing Screen


syms x;   % Setting x as symbolic variable

% Input Section
y = input('Enter non-linear equations: ');
a = input('Enter initial guess: ');
e = input('Tolerable error: ');
N = input('Enter maximum number of steps: ');

step = 1;  % Initializing step counter

% Finding derivate of given function
g = diff(y,x);

% Finding Functional Value
fa = eval(subs(y,x,a));

while abs(fa)> e
    fa = eval(subs(y,x,a));
    ga = eval(subs(g,x,a));
    if ga == 0
        disp('Division by zero.');
        break;
    end
    b = a - fa/ga; %this is the real equation of this method
    
    fprintf('step=%d\ta=%f\tf(a)=%f\n',step,a,fa);
    a = b;
    if step>N
       disp('Not convergent'); 
       break;
    end
    step = step + 1;
end

fprintf('Root is %f\n', a);





//Gauss elimination method



clc;
y = input('Please Enter the size of the equation system n=');
c = input('Please Enter the elements of the Matrix c');
b = input('Please Enter the elements of the Matrix b');
dett = det(c);

if dett == 0
    disp('This system is unsolvable because det(c) = 0');
else
    a = [c, b];
end

% Gaussian elimination method
[m, n] = size(a);

for j = 1:m-1
    for z = j+1:m
        % Check if the pivot is zero and swap rows if necessary
        if a(j,j) == 0
            t = a(j,:);
            a(j,:) = a(z,:);
            a(z,:) = t;
        end
    end
    
    for i = j+1:m
        a(i,:) = a(i,:) - a(j,:) * a(i,j) / a(j,j);
    end
end

x = zeros(1, m);

for s = m:-1:1
    c = 0;
    for k = s+1:m
        c = c + a(s,k) * x(k);
    end
    x(s) = (a(s,n) - c) / a(s,s);
end

disp('Gauss Elimination method:');
disp('Matrix a:');
disp(a);
disp('Solution vector x:');
disp(x');



//Traphezoidal method



clc;

syms x;

y = input('Enter the equation : ');
a = input('Enter lower limit : ');
b = input('Enter upper limit : ');
n = input('Enter number of intervals : ');

fa = eval(subs(y,x,a));
fb = eval(subs(y,x,b));
integration = fa + fb;
dx = (b-a)/n;

for i = 1:n-1
    k = a + (i*dx);
    fk = eval(subs(y,x,k));
    integration = integration + (fk*2);
end
integration = (integration * dx)/2;
disp('IntegrationÂ :');
disp(integration);





//Interpolation


function y0 = interpolation(x, y, x0)
clc;

x = input('enter x values :');
y = input('enter y values :');
x0 = input('enter new x :');
y0 = 0;
n = length(x);
for j = 1 : n
    
    t = 1;
    for i = 1:n
        if i~=j
            t = t*(x0-x(i))/(x(j)-x(i));
        end
    end
    y0 = y0 + t*y(j);
end
end





